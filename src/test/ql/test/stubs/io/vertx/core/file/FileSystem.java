// Generated automatically from io.vertx.core.file.FileSystem for testing purposes

package io.vertx.core.file;

import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Handler;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.file.AsyncFile;
import io.vertx.core.file.CopyOptions;
import io.vertx.core.file.FileProps;
import io.vertx.core.file.FileSystemProps;
import io.vertx.core.file.OpenOptions;
import java.util.List;

public interface FileSystem
{
    AsyncFile openBlocking(String p0, OpenOptions p1);
    Buffer readFileBlocking(String p0);
    FileProps lpropsBlocking(String p0);
    FileProps propsBlocking(String p0);
    FileSystem chmod(String p0, String p1, Handler<AsyncResult<Void>> p2);
    FileSystem chmodBlocking(String p0, String p1);
    FileSystem chmodRecursive(String p0, String p1, String p2, Handler<AsyncResult<Void>> p3);
    FileSystem chmodRecursiveBlocking(String p0, String p1, String p2);
    FileSystem chown(String p0, String p1, String p2, Handler<AsyncResult<Void>> p3);
    FileSystem chownBlocking(String p0, String p1, String p2);
    FileSystem copy(String p0, String p1, CopyOptions p2, Handler<AsyncResult<Void>> p3);
    FileSystem copy(String p0, String p1, Handler<AsyncResult<Void>> p2);
    FileSystem copyBlocking(String p0, String p1);
    FileSystem copyRecursive(String p0, String p1, boolean p2, Handler<AsyncResult<Void>> p3);
    FileSystem copyRecursiveBlocking(String p0, String p1, boolean p2);
    FileSystem createFile(String p0, Handler<AsyncResult<Void>> p1);
    FileSystem createFile(String p0, String p1, Handler<AsyncResult<Void>> p2);
    FileSystem createFileBlocking(String p0);
    FileSystem createFileBlocking(String p0, String p1);
    FileSystem createTempDirectory(String p0, Handler<AsyncResult<String>> p1);
    FileSystem createTempDirectory(String p0, String p1, Handler<AsyncResult<String>> p2);
    FileSystem createTempDirectory(String p0, String p1, String p2, Handler<AsyncResult<String>> p3);
    FileSystem createTempFile(String p0, String p1, Handler<AsyncResult<String>> p2);
    FileSystem createTempFile(String p0, String p1, String p2, Handler<AsyncResult<String>> p3);
    FileSystem createTempFile(String p0, String p1, String p2, String p3, Handler<AsyncResult<String>> p4);
    FileSystem delete(String p0, Handler<AsyncResult<Void>> p1);
    FileSystem deleteBlocking(String p0);
    FileSystem deleteRecursive(String p0, boolean p1, Handler<AsyncResult<Void>> p2);
    FileSystem deleteRecursiveBlocking(String p0, boolean p1);
    FileSystem exists(String p0, Handler<AsyncResult<Boolean>> p1);
    FileSystem fsProps(String p0, Handler<AsyncResult<FileSystemProps>> p1);
    FileSystem link(String p0, String p1, Handler<AsyncResult<Void>> p2);
    FileSystem linkBlocking(String p0, String p1);
    FileSystem lprops(String p0, Handler<AsyncResult<FileProps>> p1);
    FileSystem mkdir(String p0, Handler<AsyncResult<Void>> p1);
    FileSystem mkdir(String p0, String p1, Handler<AsyncResult<Void>> p2);
    FileSystem mkdirBlocking(String p0);
    FileSystem mkdirBlocking(String p0, String p1);
    FileSystem mkdirs(String p0, Handler<AsyncResult<Void>> p1);
    FileSystem mkdirs(String p0, String p1, Handler<AsyncResult<Void>> p2);
    FileSystem mkdirsBlocking(String p0);
    FileSystem mkdirsBlocking(String p0, String p1);
    FileSystem move(String p0, String p1, CopyOptions p2, Handler<AsyncResult<Void>> p3);
    FileSystem move(String p0, String p1, Handler<AsyncResult<Void>> p2);
    FileSystem moveBlocking(String p0, String p1);
    FileSystem open(String p0, OpenOptions p1, Handler<AsyncResult<AsyncFile>> p2);
    FileSystem props(String p0, Handler<AsyncResult<FileProps>> p1);
    FileSystem readDir(String p0, Handler<AsyncResult<List<String>>> p1);
    FileSystem readDir(String p0, String p1, Handler<AsyncResult<List<String>>> p2);
    FileSystem readFile(String p0, Handler<AsyncResult<Buffer>> p1);
    FileSystem readSymlink(String p0, Handler<AsyncResult<String>> p1);
    FileSystem symlink(String p0, String p1, Handler<AsyncResult<Void>> p2);
    FileSystem symlinkBlocking(String p0, String p1);
    FileSystem truncate(String p0, long p1, Handler<AsyncResult<Void>> p2);
    FileSystem truncateBlocking(String p0, long p1);
    FileSystem unlink(String p0, Handler<AsyncResult<Void>> p1);
    FileSystem unlinkBlocking(String p0);
    FileSystem writeFile(String p0, Buffer p1, Handler<AsyncResult<Void>> p2);
    FileSystem writeFileBlocking(String p0, Buffer p1);
    FileSystemProps fsPropsBlocking(String p0);
    Future<AsyncFile> open(String p0, OpenOptions p1);
    Future<Boolean> exists(String p0);
    Future<Buffer> readFile(String p0);
    Future<FileProps> lprops(String p0);
    Future<FileProps> props(String p0);
    Future<FileSystemProps> fsProps(String p0);
    Future<List<String>> readDir(String p0);
    Future<List<String>> readDir(String p0, String p1);
    Future<String> createTempDirectory(String p0);
    Future<String> createTempDirectory(String p0, String p1);
    Future<String> createTempDirectory(String p0, String p1, String p2);
    Future<String> createTempFile(String p0, String p1);
    Future<String> createTempFile(String p0, String p1, String p2);
    Future<String> createTempFile(String p0, String p1, String p2, String p3);
    Future<String> readSymlink(String p0);
    Future<Void> chmod(String p0, String p1);
    Future<Void> chmodRecursive(String p0, String p1, String p2);
    Future<Void> chown(String p0, String p1, String p2);
    Future<Void> copy(String p0, String p1);
    Future<Void> copy(String p0, String p1, CopyOptions p2);
    Future<Void> copyRecursive(String p0, String p1, boolean p2);
    Future<Void> createFile(String p0);
    Future<Void> createFile(String p0, String p1);
    Future<Void> delete(String p0);
    Future<Void> deleteRecursive(String p0, boolean p1);
    Future<Void> link(String p0, String p1);
    Future<Void> mkdir(String p0);
    Future<Void> mkdir(String p0, String p1);
    Future<Void> mkdirs(String p0);
    Future<Void> mkdirs(String p0, String p1);
    Future<Void> move(String p0, String p1);
    Future<Void> move(String p0, String p1, CopyOptions p2);
    Future<Void> symlink(String p0, String p1);
    Future<Void> truncate(String p0, long p1);
    Future<Void> unlink(String p0);
    Future<Void> writeFile(String p0, Buffer p1);
    List<String> readDirBlocking(String p0);
    List<String> readDirBlocking(String p0, String p1);
    String createTempDirectoryBlocking(String p0);
    String createTempDirectoryBlocking(String p0, String p1);
    String createTempDirectoryBlocking(String p0, String p1, String p2);
    String createTempFileBlocking(String p0, String p1);
    String createTempFileBlocking(String p0, String p1, String p2);
    String createTempFileBlocking(String p0, String p1, String p2, String p3);
    String readSymlinkBlocking(String p0);
    boolean existsBlocking(String p0);
}
